# -*- mode: sh -*-
# -*- (sh-set-shell "zsh") -*-
# zsh function/widget allowing you to quickly browse, perform actions, and select output from stored commands using fzf.
# Allows multiple commands in the same fzf session, e.g. browse parameters, zstyles, options, etc. in the same session.
# Requires fzf: https://github.com/junegunn/fzf and a checksum command such as md5sum
#
# WEBPAGE: https://github.com/vapniks/zfzf
#
# OVERVIEW:
# 
# When used as a normal zsh function you can either pipe input into STDIN, or supply it with a string argument containing
# the command whose output will be piped to fzf. Alternatively you can use the -a arg to specify a predefined input command
# that has been stored in the src-cmd zstyle (see PREDEFINED COMMANDS section below).
# You can also use the -z or -f options to specify a source file to load which contains zstyle statements for the ':zfzf:*'
# context. For example you may have different sets of predefined input commands (which can be accessed by pressing the
# alt-0-9/left/right keys) to use in different circumstances (see DYNAMICALLY CHANGING OPTIONS section below).
# The allowed zstyles are listed below and allow you to customize the behaviour of zfzf.
# To show function usage use the -h option.
# When used as a widget zfzf will prompt the user for a command unless a prefix arg is used, and then pipe the output from the
# user defined or predefined command to fzf. At the input command prompt you have full access to normal editing keybindings,
# and a history of previous zfzf commands. The command will be stored in a history list, and may contain a trailing comment
# to make it easier to find at a later time. If the command contains a # (e.g. as part of a globbing pattern), then you should
# also add a trailing comment (not containing any #'s) to prevent the first hash being mistaked for a comment when the line is
# checked by zfzf.
# If prefix arg <N> is used, then input command is obtained from: zstyle ':zfzf:<N>' src-cmd
#
# Also wrapper widgets named zfzf1, zfzf2,...,zfzf10 are defined which invoke zfzf with the -a arg set to 1,2,...,10,
# and the -f arg set to 1 or the value of the numeric prefix arg if used. If you bind these wrapper widget to keys
# (e.g. the fkeys) then you have quick access to different sets of input commands (e.g. you could have one for zsh
# related stuff such as parameters & options, another for package management commands, etc).
#
# HISTORY FILES:
# 
# The first time it is run the existing history is searched for commands that pipe output to fzf, and these are
# placed in a separate history file for zfzf (default is ~/.zfzf/prompt_history).
# The history of queries entered at the fzf prompt are stored in ~/.zfzf/query_history by default, but you can specify
# different history files for different commands using the fzf-histfile option (see below). The query history can be
# navigated at the fzf prompt using Ctrl-n/p. Note however that the query history is not altered if you switch to a different
# command output by pressing alt-left/right/1..9 even if the new command has a different associated history file,
# but entered queries WILL be saved to the new associated history file.
#
# PREDEFINED COMMANDS & CACHED OUTPUT:
#
# You can specify predefined commands which can be accessed by either using a numeric prefix key when you start zfzf,
# or by pressing alt-left/right or alt-1..9 at the fzf prompt after output has already been listed.
# In the latter case the current listing will switch to the output of the command associated with the numeric key pressed,
# and you can press alt-0 to switch back to the initial output. See src-cmd zstyle below.
# By default when switching output the command will be executed in a clean environment which may not produce the desired output.
# Also some commands may be slow to execute. In these cases you may prefer to cache the output which can be done using the
# cache-timeout zstyle to set a timeout for the cache file (see below). This cache file is only created for the initial input,
# which is created in the invoking shell environment. You can cache the current input listing (created in a clean environment)
# by pressing alt-C, or delete the cache by pressing alt-R. By default the cache files are stored in tmpdir (see below),
# which may be wiped on reboot. You can specify a different directory for the cache file of a command using the cachedir option
# (note however that this may be slower to read/write than tmpdir).
# To ensure that the preview environment also mimics the calling environment you could source files containing the output
# of "typeset -p" & "typeset -f". These files can be created automatically in the same directory as the other cache files
# by setting the cache-auxiliary to a timeout value.
# These features will only work if you have a checksum command such as md5sum installed on your system.
#
# DYNAMICALLY CHANGING OPTIONS & PREDEFINED COMMAND SETS:
#
# The srcs-file zstyle allows you to declare files containing zstyle commands which will be loaded on startup if the -a
# option is used, or one of the wrapper widgets (zfzf1,...,zfzf10) is invoked, or after startup when an fkey is pressed.
# This allows you to change the predefined input commands that are invoked by the alt-1 to alt-9 keys, their associated
# preview commands, and other options (e.g. keybindings). The src-file zstyle should be a path to a file containing
# only comment lines & zstyle commands with context strings matching ':zfzf:*'.
#
# PREVIEW WINDOW, HEADER, HELP FILE, OUTPUT TRANSFORMATION & OTHER ZSTYLES:
#
# To specify what should appear in the fzf preview window for a given command use the preview zstyle (see below).
# You can change the preview command for the current listing by entering a command at the prompt and pressing alt-P,
# this is useful when zfzf is used in a pipeline (see below), or for input commands with no corresponding preview zstyle.
# When the alt-v key is pressed the output of the preview command will be piped to ${PAGER}, unless this keybinding
# is overridden using other-opts. The other-opts zstyle can be used to specify other options for fzf such as extra
# keybindings, or to override default fzf options.
# By default a header line showing the default keybindings will be displayed, along with the contents of the $FZF_HEADER
# variable. You can add extra text (e.g. to display info on extra keybindings defined in other-opts) using the header zstyle
# which will display an extra header line containing the extra text.
# You can associate a text file with each input command using the helpfile zstyle. Then when the alt-h key is pressed the
# contents of that file will be displayed by $PAGER. Alternatively you can specify a command to be run to produce the help text.
# You can also specify how selected output lines should be transformed before being placed on the command line when
# the enter key is pressed, e.g. parameter names from typeset output are wrapped in ${}. See the query-pat & replace-str
# zstyles below. Note that this will affect any output that is printed to the command line from actions you may have
# bound to keys using the other-opts zstyle (see below).
#
# INPUT FROM STDIN (USING ZFZF IN A PIPELINE)
#
# zfzf can also be used as a non-widget function and take input from stdin. To specify default options for stdin you should
# use the :zfzf:stdin context with zstyle. However, since there is a wide variety of potential inputs the preview zstyle
# may not be of much use in this case. You can use the alt-P keybinding to specify a preview command (see above) for each
# different input listing.
# 
# The full list of available styles & contexts is shown below:
#
# ':zfzf:<N>' src-cmd            - predefined command line to use for numeric argument <N>. After zfzf has started you
#                                  can press alt-<N> to change the input listing to the output of this predefined command.
#                                  You can also use alt-left/right to switch between the different predefined commands.
# ':zfzf:f<N>' srcs-file         - file containing zstyles with ':zfzf:*' context strings that will be loaded when the
#                                  corresponding fkey is pressed. This allows you to dynamically alter the predefined commands
#                                  mentioned above, along with any associated preview commands and other options.
#                                  Note: setting fzf-histfile (see below) here only affects where query histories are saved,
#                                  you should also set fzf-histfile zstyles in the main config to ensure query histories are 
#                                  loaded from the same place.
# ':zfzf' prompt-histfile        - history file for commands entered at the prompt (default=~/.zfzf/prompt_history)
# ':zfzf' histsize               - maximum number of items allowed in history file (default=100)
# ':zfzf' fzf-histdir            - directory in which to store query history files
# ':zfzf:<PATTERN>' fzf-histfile - history filename for fzf queries for output from command lines matching <PATTERN>.
#                                  Default is "queries_history"), do not include directory.
#                                  Note: when switching command output only the history file associated with the first command
#                                  is loaded, but if the command output is changed and there is a different associated history
#                                  file queries will be saved there. Also note that the length of the <PATTERN>, and the order
#                                  in which the fzf-histfile lines are defined determines their priority (earlier definitions
#                                  and more specific patterns get priority).
# ':zfzf' tmpdir                 - temporary directory used to store memoization files and other info
#                                  (default is /dev/shm/zfzf or else /tmp/zfzf).
# ':zfzf:<PATTERN>' cache-timeout- if set to <S> then if the initial input command line matches <PATTERN>, its output will be 
#                                  saved to a temporary file, unless that file already exists and is less than <S> seconds
#                                  old. The next time the same command line is used for input, the file will be read
#                                  instead. This is useful when using the alt-1..9 keys to switch between different
#                                  command line inputs as these would otherwise be executed in a subshell with a clean
#                                  environment which might not produce the output you want.
#                                  Note: this requires that a checksum command such as md5sum is available on the system.
# ':zfzf:<PATTERN>' cachedir     - directory for storing cache files for commands matching <PATTERN>, instead of the default
#                                  tmpdir. Set this for commands whose cache files should be persistent across reboots.
# ':zfzf' checksum-cmd           - a command for creating checksums (default is /usr/bin/md5sum). The command line will be piped
#                                  into this function, and the first 5 chars of the returned checksum used for cache files.
# ':zfzf' cache-auxiliary        - if set to <S> then auxiliary files zfzf_parameters & zfzf_functions will be created
#                                  in the temporary directory (tmpdir zstyle) if they don't already exist or are older than
#                                  <S> seconds. These files contain the output of typeset -p & typeset -f respectively,
#                                  and can be sourced in preview commands to ensure that the preview environment mimics
#                                  the calling environment.
# ':zfzf:<PATTERN>' preview      - shell code for fzf --preview option for command lines matching <PATTERN>
#                                  (default is "print {}"). NOTE: if you don't get the desired results using this zstyle
#                                  you can override it by adding a --preview=".." to other-opts (see below). However in that
#                                  case the same preview method will be used when you switch inputs by pressing alt-0-9
# ':zfzf:<PATTERN>' sepchar      - used internally by the preview code. It should be set to a char that is unlikely
#                                  to occur in the output of command lines matching <PATTERN>. Any lines in the command
#                                  output listing that contain this char cannot be previewed (default is "<")
# ':zfzf:<PATTERN>' query-pat    - query-pat & replace-str are used for altering output; 
# ':zfzf:<PATTERN>' replace-str  - they are used in a ${(@)LINES//query-pat/replace-str} parameter 
#                                  replacement construct where LINES contains the output lines.
#                                  This means that each line will be compared with the query pattern,
#                                  and if any part matches then that part will be replaced by the
#                                  replacement string. See section 14.8 (Filename Generation) of the
#                                  zsh manual for more info about pattern & replacement strings.
# ':zfzf:<PATTERN>' header       - extra text to display under the header line for command lines matching <PATTERN>
#                                  (e.g. to display extra keybindings defined in other-opts).
# ':zfzf:<PATTERN>' helpfile     - for command lines matching <PATTERN> the location of a text file, or a command line
#                                  producing text to display when the alt-h key is pressed.
# ':zfzf:<PATTERN>' other-opts   - other fzf options used for command lines matching <PATTERN>
#                                  (default is "--multi --height=50% --preview-window=down:wrap").
# ':zfzf' debug                  - set to non-empty to print internal debugging info
#
# TIPS:
# - You can use the other-opts style to bind keys that print output to the command line, but bear in mind that the output
#   will be affected by the query-pat & replace-str zstyles. To ensure that certain outputs are not affected, use the ~ pattern
#   operator to exclude certain matches, e.g. PAT1~PAT2 matches PAT1 but not PAT2, you may also need to use (#s) & (#e) in query-pat
#   to prevent PAT1 matching part of the string, e.g. (#s)*PAT1*(#e)~*PAT2*
# - You can append comments to the input command which can be used for matching zstyles. This makes it easy to specify which
#   preview command to use, e.g. if you set a preview zstyle which matches "*file paths*", then any command which has a trailing
#   comment containing "file paths" will use that preview method.
# - Any commands run by the fzf preview or execute actions are run in a subshell with its own fresh environment
#   so you may need to source some files &/or change some options to get the behaviour you want.
# - Placeholder expressions in fzf preview & execute actions, e.g. {}, {+}, are quoted which may cause problems if you
#   want to use them as arguments to commands. You can get around this by assigning them to parameters, and then using
#   the parameter as the command argument, e.g: tmpvar=({+}); print - \"\${tmpvar//foo/bar}\"
#   or by using eval, e.g: eval \"print - {}\"
# - You should quote $'s for parameters that appear in fzf --bind="..." arguments in the other-opts zstyle, e.g:
#   '--bind="alt-E:execute(tmpvar=foo; print \${tmpvar})"'
#
# Examples:
#
# TODO:
# Use numeric argument 1 for browsing files in the current directory, and 2 for browsing syscall manpages:
# > zstyle ':zfzf:0' src-cmd "cat ${HOME}/.zfzf/prompt_history"
# > zstyle ":zfzf:cat*${HOME}/.zfzf/prompt_history" keybind-opts "--bind='enter:execute(zfzf {})'"
# > zstyle ":zfzf:cat*${HOME}/.zfzf/prompt_history" preview "eval {}"
# > zstyle ':zfzf:1' src-cmd 'ls ./*'
# > zstyle ':zfzf:2' src-cmd 'apropos -s 2 ".*"'
# > zstyle ':zfzf:3' src-cmd 'print -l - ${history}'
# > zstyle ':zfzf:4' src-cmd 'print -l - ${(k)aliases}'
# > zstyle ':zfzf:5' src-cmd 'set -o'
# > zstyle ':zfzf:6' src-cmd 'typeset +' #TODO: set enter key to vared?
# > zstyle ':zfzf:7' src-cmd 'typeset +f'
# > zstyle ':zfzf:typeset +' preview 'print - \$\{{-1}\}'
# > zstyle ':zfzf:typeset +f' preview 'which {+}'
# > zstyle ':zfzf:typeset +f' preview "typeset -a fpath=(${fpath}) && ( autoload +XU - {+}; which - {+} )"

# WARNING: this code involved a lot of string & quotation wrangling to get it to work properly. Alter at your peril.
# TODO: change help notes (ctrl-h) when input sources change, and change keybindings to match input source (could define
# all alt-[A-Z] keybindings to load from zfzf_[0-9] files)
# manpage?
# handle ansi color codes?
# ability to specify multiple commands (for different alt-[0-9] keys)
# rlwrap plugin to make this work with rlwrap, or zsh -c "..." (ATM it gives error "bind action not specified")
if [[ $(basename $SHELL) != zsh ]]; then
    print "zfzf only works with zsh" >&2
    return 1
fi

# Helper function to store options for each predefined input source in temporary files.
# This should not normally be called by the user.
# Arguments: command for initial input, tmp directory, checksum command, state file, keys file, prefix keys to create...
_zfzf-set-predefined() {
    local srccmd srccmd2 prevopt p1 p2 helpfile fzfhistfile checksum cachefile opts key binding
    opts=" --bind='"
    for i in ${@[6,-1]}; do
	if [[ $i -eq 0 ]]; then
	    srccmd="${1}" # 0 prefix should reload initial input
	else
	    zstyle -s ":zfzf:$i" src-cmd srccmd # other prefix keys
	    opts+=","
	fi
	if [[ -n $srccmd ]]; then
	    # get the options for the command associated with this prefix key
	    zstyle -s ":zfzf:${srccmd}" cachedir cachedir || zstyle -s ":zfzf:${(q)srccmd}" cachedir cachedir || cachedir=${2}
	    checksum="${$(print - ${srccmd%%\#[^)\}\#]#}|${3})[1,5]}"
	    cachefile="${cachedir}/zfzf_${checksum}"
	    zstyle -s ":zfzf:${srccmd}" preview prevopt || \
		zstyle -s ":zfzf:${(q)srccmd}" preview prevopt || \
		prevopt="print - \"{}\""
	    zstyle -s ":zfzf:${srccmd}" query-pat p1 || zstyle -s ":zfzf:${(q)srccmd}" query-pat p1
	    zstyle -s ":zfzf:${srccmd}" replace-str p2 || zstyle -s ":zfzf:${(q)srccmd}" replace-str p2
	    zstyle -s ":zfzf:${srccmd}" helpfile helpfile || zstyle -s ":zfzf:${(q)srccmd}" helpfile helpfile
	    zstyle -s ":zfzf:${srccmd}" fzf-histfile fzfhistfile || \
		zstyle -s ":zfzf:${(q)srccmd}" fzf-histfile fzfhistfile || fzfhistfile="queries_history"
	    # create state file for this prefix key (TODO: make statefile unique for this session)
	    print - "${srccmd%%\#[^0\}\#]#}" > "${2}/zfzf_${i}"
	    print - "${(q)prevopt}" >> "${2}/zfzf_${i}"
	    print - "${(q)p1}" >> "${2}/zfzf_${i}"
	    print - "${(q)p2}" >> "${2}/zfzf_${i}"
	    print - "${helpfile}" >> "${2}/zfzf_${i}"
	    print - "${fzfhistfile}" >> "${2}/zfzf_${i}"
	    print - "${cachefile}" >> "${2}/zfzf_${i}"
	    print - $i >> "${2}/zfzf_${i}"
	    for key in alt-{A..Z}; do
		zstyle -s ":zfzf:${srccmd}" $key binding || zstyle -s ':zfzf:${(q)srccmd}' $key binding
		if [[ -n $binding ]]; then
		    print - "${key}:${binding}" >> "${2}/zfzf_${i}"
		fi
	    done
	    srccmd2="set -o extendedglob; cachefile=\$(sed -n 7p ${2}/zfzf_${i});srccmd=\$(sed -n 1p ${2}/zfzf_${i}); if [[ -a \$cachefile ]]; then print \$((\$(date +%s)-\$(stat -c %Y \${cachefile}))) SECONDS OLD CACHED DATA FROM \${cachefile}; cat \${cachefile}; elif [[ \${(z)srccmd[(w)1]} == stdin ]]; then print Cannot recreate STDIN; else eval \${srccmd}; fi"
	    # add keybinding for this prefix key to the options; it updates the state & dynamics keys files
	    opts+="alt-${i}:execute(cp ${2}/zfzf_${i} ${4} & grep \"alt-[A-Z]\" ${2}/zfzf_${i}|tr \: \= >${5})+reload(${srccmd2})"
	fi
    done
    unset i
    opts+="'"
    print $opts # return fzf option for keybindings
}
# Main function
zfzf() {
    emulate -LR zsh
    setopt extendedglob histignoredups histignorealldups histfindnodups histignorespace histlexwords
    setopt appendhistory histreduceblanks histsavenodups
    unsetopt extendedhistory # keep the history file simple
    local USAGE="Usage: zfzf [-z <FILE>|-f <N>] [-a <N>|\"<CMD>\"]
Pipe output from <CMD> through fzf with extra functionality.

 -z <FILE>		load zstyle definitions from <FILE> before starting
 -f <N>			load zstyle definitions from file stored in: zstyle ':zfzf:f<N>' srcs-file
 -a <N>                 use input command stored in: zstyle ':zfzf:<N>' src-cmd
 -d                     show debug output
 -h / -\?       	show this help

e.g:     > zstyle -L | zfzf
or:      > zfzf \"zstyle -L\"
or store the command in a zstyle like this: > zstyle 'zfzf:1' src-cmd 'zstyle -L'
then do: > zfzf -a 1

Once started press ctrl-h in the fzf menu to see extra keybindings.
Detailed documentation is available in the Readme file, or here: https://github.com/vapniks/zfzf
" # TODO: add example of using preview zstyle. Add manpage or more detailled help option?
    local option srcsfile zstylerestore inputnum debug
    # read command line options
    # Variables: OPTIND=index of next argument to be processed, OPTARG=set to current option argument
    # Place a colon after every option that has an argument (initial colon means silent error reporting mode)
    while getopts "z:f:a:dh\?" option; do
	case $option in # TODO
      	    (z|--zstyles)
		if [[ -n $srcsfile ]]; then
		    print "$USAGE"
		    return 1
		fi
		srcsfile="${OPTARG}"
		zstylerestore=$(zstyle -L ':zfzf:*')
		;;
	    (f)
		if [[ -n $srcsfile ]]; then
		    print "$USAGE"
		    return 1
		fi
		zstyle -s ":zfzf:f${OPTARG}" srcs-file srcsfile
		zstylerestore=$(zstyle -L ':zfzf:*')
		;;
	    (a)
		inputnum=$OPTARG
		;;
	    (d)
		debug=1
		;;
            (\?|h)
		echo "$USAGE"
		return 0
		;;
	esac
    done
    # load zstyles if required
    if [[ -r $srcsfile ]]; then
	if /bin/grep -v '^[[:space:]]*\(zstyle[[:space:]]\+.:zfzf:\|#\|$\)' $srcsfile >/dev/null; then
	    print - "${srcsfile} contains invalid commands.
It should only contain zstyle commands with context strings matching ':zfzf:*'" >&2
	    return 1
	else
	    source $srcsfile
	fi
    fi
    # input command is either passed as an argument, or using a prefix key, 
    # or it will be obtained later from the user if STDIN is empty.
    local srccmd="${@[$OPTIND]}"
    if [[ -z $srccmd && -n ${inputnum:=$NUMERIC} ]] zstyle -s ":zfzf:${inputnum}" src-cmd srccmd
    # read from STDIN if available
    local -a stdinput
    if [[ -z $srccmd ]]; then
    	while read line; do
    	    stdinput+=${line}
    	done
    fi
    # check PAGER
    if [[ -z $PAGER ]] print "Warning: PAGER not set, help pages & previews might not work" >&2

    typeset -a lines # for storing lines selected in fzf
    local REPLY orig_lbuffer orig_rbuffer orig_prompt histdir histfile histsize err 
    local cmdoutput retval i prevopt tmpdir cacheaux
    # set the temporary directory where the state files will be stored
    zstyle -s ":zfzf" tmpdir tmpdir || [[ -d /dev/shm && -w /dev/shm ]] && tmpdir=/dev/shm/zfzf || tmpdir=/tmp/zfzf
    mkdir -p $tmpdir >/dev/null
    : ${debug=${DEBUG:-$(zstyle -L ":zfzf:" debug)}}
    # cache parameter & function values if required
    zstyle -s ":zfzf" cache-auxiliary cacheaux
    if [[ -n $cacheaux ]]; then
	local parametersfile="${tmpdir}/zfzf_parameters" functionsfile="${tmpdir}/zfzf_functions"
	if [[ ! -a $parametersfile ]] || (($(date +%s)-$(stat -c %Y ${parametersfile}) > cacheaux)); then
	    # remove builtin parameters before saving to avoid breakage
    	    typeset -p|sed -Ee '/^typeset( [-\+][A-Za-z0-9]+)? (-[a-zA-Z0-9]*r[a-zA-Z0-9]*)/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(CURRENT|ISEARCHMATCH_[A-Z]+|(Q?I)?PREFIX|compstate)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(words|(L|R|CUT|PRE)?BUFFER(LINES)?|CURSOR|HISTNO|LASTABORTEDSEARCH)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(MARK|NUMERIC|(PRE|POST)DISPLAY|REGION_ACTIVE|region_highlight)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(UNDO_(LIMIT|CHANGE)_NO|YANK_(START|END)|ZLE_STATE)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(killring|registers|(Q?I)?SUFFIX(_[A-Z]+)?)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(KEYS_QUEUED_COUNT|PENDING|YANK_(ACTIVE|START|END))=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(ZLE_RECURSIVE)=/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(dis_)?(functions(_source)?|builtins|reswords|patchars|[gs]?aliases)($|=)/d'\
	                   -e '/^typeset ([-\+][^ ]{1,4} )*(job(dirs|texts|states)|nameddirs|user(dirs|groups))($|=)/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(func(stack|(file|source)?trace)|parameters|modules|dirstack)($|=)/d' \
			   -e '/^typeset ([-\+][^ ]{1,4} )*(history(words)?|options|commands)($|=)/d' > ${parametersfile}
	fi
	if [[ ! -a $functionsfile ]] || (($(date +%s)-$(stat -c %Y ${functionsfile}) > cacheaux)); then
    	    typeset -f > ${functionsfile}
	fi
    fi
    # set the history size and directory
    zstyle -s ":zfzf" histsize histsize || histsize=100
    zstyle -s ":zfzf" fzf-histdir histdir || histdir="${HOME}/.zfzf" # TODO: move to ${HOME}/.cache/zfzf / ${XDG_CACHE_HOME}/zfzf
    mkdir -pv ${histdir}
    # save the current command line buffer contents so we can put it back when we're finished
    orig_lbuffer="${LBUFFER}"
    orig_rbuffer="${RBUFFER}"
    orig_prompt="${PROMPT}"
    # exiting the following code block will run the subsequent "always" block
    {
	# store input/input command in REPLY
	# either from input command supplied as an argument, or a prefix key, or via STDIN, or prompted from user
	if [[ -n $srccmd ]]; then 
	    REPLY="${srccmd}"
	    print -S - "${REPLY}" # save input command to history file
	elif [[ -n $stdinput ]]; then
	    REPLY=stdin # TODO: can we work out if we're running under rlwrap using lsof?
	else 
	    # create & populate prompt history file if it doesn't already exist
	    zstyle -s ":zfzf" prompt-histfile histfile || histfile="${HOME}/.zfzf/prompt_history"
	    if [[ ! -a ${histfile} ]]; then
    	        print -l - ${(u)${(M)history:#*\| #fzf[^\)]#}//\| #fzf[^\)]#} > "${histfile}"
	        export zfzf_last_hist_item="${${(k@)history}[1]}"
            fi
	    typeset -aU newhistitems zstyleitems
	    fc -ap ${histfile} ${histsize} # set the history list
	    # add to the prompt history items bound to prefix keys by zstyle
	    zstyleitems=("${(f)$(zstyle -L ':zfzf:*' src-cmd|sed 's/zstyle :zfzf:. src-cmd .\(.*\)./\1/')}")
	    local item
	    for item in "${zstyleitems[@]}"; do
		if [[ -z ${history[(re)${item}]} ]] { print -S - "${item}" }
	    done
	    # extract new fzf input commands from the standard history list, and add these to the prompt history
	    if [[ ${zfzf_last_hist_item} != ${${(k@)history}[1]} ]]; then
		: ${zfzf_last_hist_item:=${${(k@)history}[((HISTSIZE-1))]}}
		local age="$(stat -c %Y ~/.zsh_history)"
		local awkprog="/.\\| *fzf[^\)]*\$/{if(\$2>${age}){\$1=\$2=\"\";sub(/\\| *fzf.*/,\"\");print}}"
		newhistitems=("${(f)$(fc -t '%s' -l ${zfzf_last_hist_item}|awk ${awkprog})}")
		zfzf_last_hist_item="${${(k@)history}[1]}"
	    fi
	    for item in ${newhistitems//(#s) #}; do
		if [[ -z ${history[(re)${item}]} ]] { print -S - "${item}" }
	    done
	    # remove variables from the prompt since these aren't expanded by read-from-minibuffer
	    PROMPT="${orig_prompt//\$\([^\)]##\)}"
	    # prompt the user for the input command
	    read-from-minibuffer "Input command: "
	    # reset the buffer & prompt since read-from-minibuffer changes it
	    LBUFFER="${orig_lbuffer}"
	    RBUFFER="${orig_rbuffer}"
	    zle reset-prompt
	    # if an empty string was entered, or there was an error then exit
	    if [[ -z $REPLY || $? -gt 0 ]] return
	    print -S - "${REPLY}" # save input command to history file
	fi
	# get cacheing options and figure out if we should be reading cached input 
        local cachetimeout modtime cachedir cachefile1 cachefile2 docache freshfile checksumcmd checksum
	zstyle -s ":zfzf:${REPLY}" cache-timeout cachetimeout || zstyle -s ":zfzf:${(q)REPLY}" cache-timeout cachetimeout
	zstyle -s ":zfzf" checksum-cmd checksumcmd || zstyle -s ":zfzf" checksum-cmd checksumcmd || \
	    checksumcmd="/usr/bin/md5sum"
	zstyle -s ":zfzf:${REPLY}" cachedir cachedir || zstyle -s ":zfzf:${(q)REPLY}" cachedir cachedir || cachedir=${tmpdir}
	if [[ -z "$(command -v ${checksumcmd})" ]]; then
	    print "Cannot find ${checksumcmd}" >&2
	    return 1
	fi
	checksum="${$(print - ${REPLY%%\#[^)\}\#]#}|${checksumcmd})[1,5]}"
	cachefile1="${cachedir}/zfzf_${checksum}"
	if [[ -n $cachetimeout && -z $stdinput ]] docache=1
	if [[ $docache == 1 && -a $cachefile1 ]] freshfile=$(($(date +%s)-$(stat -c %Y "$cachefile1") <= ${cachetimeout}))
	if [[ $docache == 1 && $freshfile == 1 ]]; then
	    cmdoutput="$(cat ${cachefile1})" # read cached input
	elif [[ -n $stdinput ]]; then
	    cmdoutput="${(F)stdinput[@]}" # read input from STDIN
	else # remove trailing comment from command before evaling it
	    cmdoutput="$(eval ${REPLY%%\#[^)\}\#]#})" # eval command to get input
	fi
	err=${?}
	if [[ ${err} = 0 ]]; then
	    local fzfhistfile1 fzfopts fzfopts2 statefile keysfile p1 p2 s header helpfile srccmd2 substidx 
	    # create cache file if necessary
	    if [[ $docache == 1 && $freshfile != 1 ]] print "${cmdoutput}" > $cachefile1
	    # Save info about keybindings to file for viewing when C-h is pressed
	    keysfile="${tmpdir}/zfzf_keys" # TODO: add help about fzf query patterns?
	    dynamickeysfile="${tmpdir}/zfzf_dynamic_keys" # to store descriptions of dynamically loaded keys
	    print "alt-right/left = switch to next/previous input\nalt-0 = switch to original input" > $keysfile
	    zstyle -L ':zfzf:[1-9]' src-cmd|sed -e 's/^zstyle :zfzf:/alt-/' -e 's/src-cmd/= change input to/' >> $keysfile
	    print "alt-h = show help specific to the currently displayed input lines" >> $keysfile
	    print "alt-P = change preview command to current query string" >> $keysfile
	    zstyle -L ':zfzf:f*' srcs-file|sed -e 's/^zstyle :zfzf:\(f[0-9]\) .* \(.*\)/\1 = load zstyles from \2/' >> $keysfile
	    # Set fzf to read the preview command from the state file, and substitute braces with appropriate word from the
	    # currently selected line.
	    statefile="${tmpdir}/zfzf_state" # TODO: make statefile unique for each session
	    zstyle -s ":zfzf:${REPLY}" sepchar s || zstyle -s ":zfzf:${(q)REPLY}" sepchar s || s='<'
	    # the following string is needed to substitute {},{1}, etc. for the associated strings in fzf preview & execute 
	    # actions that are read dynamically from files (WARNING: quoting hell)
	    substidx="|{ztmp={}; sed -E \"s${s}\\\{\\\}${s}\${\${\${(qqq)ztmp//(#b)([\{\}\;])/\\\\\${match[1]}}//\\\"/\\\\\\\\\\\"}//\$/\\\\\\\\$}${s}\"}"
	    #substidx="|{ztmp=\"{}\"; sed -E \"s${s}\\\{\\\}${s}\${\${\${(q)ztmp//(#b)([\{\}\;])/\\\\\${match[1]}}//\\\"/\\\\\\\\\\\"}//\$/\\\\\\\\$}${s}\"}"
	    substidx+="|{ztmp=({+}); sed -E \"s${s}\\\{\\\+\\\}${s}\${\${(qqq)ztmp//(#b)([\{\}\;\\$])/\\\\\${match[1]}}//\\\"/\\\\\\\\\\\"}${s}\"}" # TODO: fixme (figure out what level of quoting is needed here)
	    substidx+="|{ztmp=({+}); sed -E -e \"s${s}\\\{\\\+\\\}${s}\${\${\${\${ztmp[@]/%/\\x00}//(#b)([\{\}\;])/\\\\\${match[1]}}//\\\"/\\\\\\\\\\\"}//\$/\\\\\\\\$}${s}\"}"
	    #substidx+="|{ztmp=({+}); sed -E \"s${s}\\\{\\\+\\\}${s}\${\${\${ztmp[@]/%/\\x00}//(#b)([\{\}\;\\$])/\\\\\${match[1]}}//\\\"/\\\\\\\\\\\"}${s}\"}"
	    #print - $substidx #DEBUG
	    for i in {1..5}; do
	    	substidx+="|{ztmp={$i}; sed -E \"s${s}\\\{$i\\\}${s}\${(qqq)ztmp}${s}\"}"
	    	substidx+="|{ztmp={-$i};sed -E \"s${s}\\\{-$i\\\}${s}\${(qqq)ztmp}${s}\"}"
	    	substidx+="|{ztmp={+$i};sed -E \"s${s}\\\{\+$i\\\}${s}\${(qqq)ztmp}${s}\"}"
	    done
	    previewopt="\$(set -o extendedglob; sed -n 2p ${statefile} ${substidx})"
	    # set the fzf history file
	    zstyle -s ":zfzf:${REPLY}" fzf-histfile fzfhistfile1 || zstyle -s ":zfzf:${(q)REPLY}" fzf-histfile fzfhistfile1 || \
		fzfhistfile1="queries_history"
	    touch "${histdir}/${fzfhistfile1}"
	    fzfopts="--history='${histdir}/${fzfhistfile1}' --preview='eval ${previewopt}' "
	    # set the header for the fzf menu
	    zstyle -s ":zfzf:${REPLY}" header header || zstyle -s ":zfzf:${(q)REPLY}" header header
	    fzfopts+=" --header='alt-1/9=switch input,alt-0=original input,alt-R=rm cache,ctrl-h=help,${FZF_HEADER}"
	    if [[ -n $header ]] fzfopts+="
${header}"
	    fzfopts+="'"
	    # Now set the keybindings. 
	    # use _zfzf-set-predefined to define alt-0-9 keybindings which change the statefile and reload sources.
	    if [[ ! -a ${tmpdir}/zfzf_set_predefined ]] which _zfzf-set-predefined > ${tmpdir}/zfzf_set_predefined
	    fzfopts+=$(_zfzf-set-predefined $REPLY $tmpdir $checksumcmd $statefile $dynamickeysfile {0..9})
	    # define alt-left/right to swipe left/right through the input sources   
	    srccmd2="set -o extendedglob; cachefile=\$(sed -n 7p ${statefile}); srccmd=\$(sed -n 1p ${statefile}); if [[ -a \$cachefile ]]; then print \$((\$(date +%s)-\$(stat -c %Y \${cachefile}))) SECONDS OLD CACHED DATA FROM \${cachefile}; cat \${cachefile}; elif [[ \${(z)srccmd[(w)1]} == stdin ]]; then print Cannot recreate STDIN; else eval \${srccmd}; fi"
	    fzfopts+=" --bind='alt-left:execute-silent[prefix=\$(sed -n 8p ${statefile}); cp ${tmpdir}/zfzf_\$(((prefix+9)%10)) ${statefile}]+deselect+reload(${srccmd2})'"
	    fzfopts+=" --bind='alt-right:execute-silent[prefix=\$(sed -n 8p ${statefile}); cp ${tmpdir}/zfzf_\$(((prefix+1)%10)) ${statefile}]+deselect+reload(${srccmd2})'"
	    # source specific keybindings
	    # TODO: is there a way to add the query to the fzf history before aborting? maybe using an extra execute action?
	    local key template
	    # add dynamic keybindings
	    # (whose corresponding commands where stored in the statefiles by _zfzf-set-predefined)
	    for key in alt-{A..Z}; do
	    	zstyle -s ":zfzf:$key" keybind-template template || template='execute(%)+deselect+abort'
	    	#srccmd2="${template//\%/set -o extendedglob; srccmd=\$(grep \"^${key}:\" ${statefile}|sed -e \"s/^${key}://\" ${substidx}); print - \${srccmd\} >/dev/shm/zfzf/test}" #DEBUG
		srccmd2="${template//\%/set -o extendedglob; srccmd=\$(grep \"^${key}:\" ${statefile}|sed -e \"s/^${key}://\" ${substidx}); eval \${srccmd\}}"
	    	fzfopts+=" --bind='${key}:${srccmd2}'"
	    done
	    fzfopts+=" --bind='enter:accept,ctrl-j:accept'"
	    fzfopts+=" --bind='alt-v:execute(eval ${previewopt}|${PAGER} >&2)'"
	    fzfopts+=" --bind='alt-h:execute(helpfile=\$(sed -n 5p ${statefile}); if [[ -n \"\${helpfile}\" ]];then if [[ -a \"\${helpfile}\" ]]; then $PAGER \"\${helpfile}\" >&2;else eval \"\${helpfile}\" >&2;fi ;fi)'"
	    fzfopts+=" --bind='ctrl-h:execute(cat $keysfile $dynamickeysfile | $PAGER >&2)'"
	    fzfopts+=" --bind='alt-P:execute(tmp={q}; sed -i \"2 s${s}.*${s}\${tmp}${s}\" ${statefile})'"
	    # f1-f12 keys load new set of input commands from zstyles stored in files
	    for i in {1..12}; do
		zstyle -s ":zfzf:f$i" srcs-file srcsfile
		if [[ -n $srcsfile ]]; then
		    # can't use {1..9} here...
		    fzfopts+=" --bind='f${i}:execute-silent(set -o extendedglob; source ${srcsfile}; source ${tmpdir}/zfzf_set_predefined; _zfzf-set-predefined \"${REPLY}\" $tmpdir $checksumcmd $statefile $dynamickeysfile 1 2 3 4 5 6 7 8 9 >/dev/null)'" 
		fi
	    done
	    # keybindings for updating/removing the cache file (TODO: change these keybindings?)
	    fzfopts+=" --bind='alt-R:execute(cachefile=\$(sed -n 7p ${statefile}); if [[ -a \${cachefile} ]] rm \${cachefile} )'"
	    fzfopts+=" --bind='alt-C:execute(cachefile=\$(sed -n 7p ${statefile}); srccmd=\$(sed -n 1p ${statefile}); set -o extendedglob; eval \${srccmd} > \${cachefile})'"
	    # set the statefile for the initial input
	    if [[ -n $inputnum ]]; then
		cp "${tmpdir}/zfzf_${inputnum}" $statefile
	    else
		cp "${tmpdir}/zfzf_0" $statefile
	    fi
	    # write descriptions of dynamic keys for current input
	    grep 'alt-[A-Z]' "${statefile}"|tr \: \= > $dynamickeysfile
	    # other options
	    zstyle -s ":zfzf:${REPLY}" other-opts fzfopts2 || zstyle -s ":zfzf:${(q)REPLY}" other-opts fzfopts2 || \
		fzfopts2="--multi --height=~50% --preview-window=right:wrap"
	    if [[ -n ${debug} ]]; then
		print "\nfzf-histfile=${fzfhistfile1}"
		print "cachefile1=${cachefile1}\ncache=${docache}\ncachetimeout=${cachetimeout}\ncacheaux=${cacheaux}"
		print "previewopt=${previewopt}"
		print "fzfopts=${fzfopts}\nother-opts=${fzfopts2}"
	    fi
	    # Prompt the user for an item from the command output using fzf (don't use --print-query here since the we may
	    # need to print to the shell prompt from a keybinding action)
	    print -l -r - ${cmdoutput} | eval "fzf ${fzfopts} ${fzfopts2}"|\
		while read retval;do lines+=${retval};done
	elif [[ -n ${WIDGET} ]]; then
	    zle -M "zfzf: \"${REPLY}\" returned error code ${err}"
	else
	    print "zfzf: \"${REPLY}\" returned error code ${err}"
	fi
    } always {
        # the commands in this block are run even if there's an error/user quit
        unset i 
	local fzfhistfile2
	if [[ -a "${statefile}" ]]; then
	    p1="$(sed -n 3p ${statefile})"
	    p2="$(sed -n 4p ${statefile})"
	    # last fzf query was saved in $fzfhistfile1, but we want to save it to the end of history file listed
	    # on line 6 of the statefile (unless it's already there).
	    fzfhistfile2="$(sed -n 6p ${statefile})"
	    if (($(date +%s)-$(stat -c %Y "${histdir}/${fzfhistfile1}") <= 1)); then
		local -a lastquery1=("${(f)$(tail -2 ${histdir}/${fzfhistfile1})}")
		local lastquery2
		if [[ $fzfhistfile1 != $fzfhistfile2 ]]; then
		    lastquery2="$(tail -1 ${histdir}/${fzfhistfile2})"
		    if [[ ${lastquery1[2]} != $lastquery2 ]]; then
			print - "${lastquery1[2]}" >> "${histdir}/${fzfhistfile2}"
			sed -i '$d' "${histdir}/${fzfhistfile1}"
		    fi
		else
		    if [[ ${lastquery1[1]} == ${lastquery1[2]} ]] sed -i '$d' "${histdir}/${fzfhistfile1}"
		fi
	    fi
	fi
	if [[ -n ${debug} ]]; then
	    print "REPLY=${(q)REPLY}\nquery-pat=${p1}\nreplace-str=${p2}"
	    print "orig_lbuffer=${orig_lbuffer}\norig_rbuffer=${orig_rbuffer}\nlines=${lines}\nfzfhistfile=${fzfhistfile2}"
	else
	    # we no longer need the state files
	    rm ${tmpdir}/zfzf_{{0..9},state,dynamic_keys} 2>/dev/null
	fi
	# if zstyles were changed in this shell then restore them
	if [[ -n $zstylerestore ]] eval $zstylerestore
	# reset the zsh command line and prompt to original values
	PROMPT="${orig_prompt}"
	LBUFFER="${orig_lbuffer}${(@)lines//${~p1}/${(e)p2}}"
	RBUFFER="${orig_rbuffer}"
	if [[ -n $WIDGET ]] zle redisplay
    }
}
# wrapper functions which can be used as widgets 
for i in {1..10}; eval "zfzf$i() { zfzf -f $i -a \${NUMERIC:-1} } && zle -N zfzf$i" >/dev/null
unset i

# make sure zfzf is called first time
zfzf $@
